--- question_2/wrong429/wrong_2_429.py	2023-11-27 23:06:57.792328447 +0200
+++ question_2/wrong429/reference.py	2023-11-27 23:06:57.792328447 +0200
@@ -1,47 +1,19 @@
-def unique_day ( var__0 , var__1 ) : 
-  var__2 = ( ) 
-  var__3 = ( ) 
-  try:
-    qiNjVw=iter(var__1)
-    while True:
-      var__4=next(qiNjVw)
-      
-      if not var__4 [ 1 ] in var__2:
-        var__3 += ( var__4 [ 1 ] , ) 
-      else:  
-        var__2 += ( var__4 [ 1 ] , ) 
-  except StopIteration:
-    pass
-  return var__0 not in var__3 
-def unique_month ( var__5 , var__1 ) : 
-  var__6 = ( ) 
-  var__7 = ( ) 
-  try:
-    evPw=iter(var__1)
-    while True:
-      var__4=next(evPw)
-      
-      if not var__4 [ 0 ] not in var__6:  
-       var__7 += ( var__4 [ 0 ] , ) 
-      else:
-        var__6 += ( var__4 [ 0 ] , ) 
-  except StopIteration:
-    pass
-  return var__5 not in var__7 
-def contains_unique_day ( var__5 , var__1 ) : 
-  try:
-    NGfkOLBkmxX=iter(var__1)
-    while True:
-      var__4=next(NGfkOLBkmxX)
-      if not unique_day ( var__4 [ 1 ] , var__1 ):
-        pass
-      else:  
-        if not var__5 == var__4 [ 0 ]:    
-          continue   
-        else:    
-          return True 
-  except StopIteration:
-    pass
-  finally:
-    return False 
-  
+def unique_day(day, possible_birthdays):
+    count = 0
+    for birthday in possible_birthdays:
+        if birthday[1] == day:
+            count += 1
+    return count == 1
+
+def unique_month(month, possible_birthdays):
+    count = 0
+    for birthday in possible_birthdays:
+        if birthday[0] == month:
+            count += 1
+    return count == 1
+
+def contains_unique_day(month, possible_birthdays):
+    for birthday in possible_birthdays:
+        if birthday[0] == month and unique_day(birthday[1], possible_birthdays):
+            return True
+    return False
